<!DOCTYPE html>
<!-- Jillian Srygley
	CMPT 120L-200 
	Assignment 5 Game v0.8
	November 7, 2016 -->
<html><head ><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

	<link rel="stylesheet" type="text/css" href="game stylesheet 7.css">
	
	<link href="https://fonts.googleapis.com/css?family=Didact+Gothic" rel="stylesheet">

      <title>
         Jillian's Awesome Game
      </title>
	  
	  <!--  <script type="text/javascript" src="JS_game_6_locations2.js"></script> -->
	  
      <script type="text/javascript">
      
      // I set up this variable so that when the player goes to the page, they enter their name and then it is displayed in the header of the game page
      
      var name; 
      
      name = window.prompt("Please enter your name.");
      
      document.write( "<h1 class='banner'> Welcome to " + name + "'s Tasty Grocery Adventure! </h1>");
      
      var currentLoc;
      var score = 0;
      var BAD = -1;
      var NORTH = 0;
      var SOUTH = 1;
      var EAST = 2;
      var WEST = 3;
      var northCommand = "n";
      var southCommand = "s";
      var eastCommand = "e";
      var westCommand = "w";
      var currentLoc; 
      
      var helpCommand = "help";
      var cartCommand = "cart";
      var takeCommand = "take";
      
      var cart = ["coupon"];
      
      var bananaInCart = false; 
      var cupcakeInCart = false;
      var pringlesInCart = false; 
      
      var bananaCount = 0;
      var cupcakeCount = 0;
      var pringlesCount = 0;
      
      var banana; 
      var cupcake;
      var pringles;
      
      //Item arrays for each location - figure out what to do with these
      
      var centerItems = [];
      var bakeryItems = ["cupcake"];
      var dairyItems = [];
      var produceItems = ["banana"];
      var junkItems = ["pringles"];
      var spicesItems = [];
      var lobsterItems = [];
      var cerealItems = [];
      var pastaItems = [];
      var ramenItems = [];
      var veggieItems = ["carrot"];
      
      var commands = [ northCommand, southCommand, eastCommand, westCommand, helpCommand, cartCommand, takeCommand ];
     // var validCommands = "Valid commands are:\n\n" + commands.toString(); do I need this? 
      
      function Location(locationId, locationName, locationDescription, locationArray) {
      	this.id = locationId;
      	this.name = locationName;
      	this.description = locationDescription;
      	this.array = locationArray
      	
      	//this.validDirections = [BAD, BAD, BAD, BAD]; //Array
      	this.visited = false;
      	this.toString = function() {
      		var message = "Location: " + this.name + "\n\n" + this.description;
      		return (message);
      	}
      	this.visit = function() {
      		currentLoc = this.id;	
      		if (this.visited === false) {
      			this.visited = true;
      			score += 5;
      		}
      		displayMessage (this.toString());
      		disableButtons(this.validDirections);
      		updateScore();
      		displayScore();
      		}
      	}
     
      function Item(itemId, itemName, itemDescription) {
    	  this.id = itemId;
    	  this.name = itemName;
    	  this.description = itemDescription;
    	  this.toString = function() {
    		  displayMessage(this.Description);
    	  }
      }
      
      function updateScore() {
    	  document.getElementById("taMain").textContent = "Score: " + score;
    	  }
      
      
      var center = new Location(0, "Middle of Price Chopper", "You are in the middle of Price Chopper.", centerItems);
      var bakery = new Location(1, "Bakery Section", "You are in the bakery section. Your friend Molly is admiring the Lofthouse cookies!", bakeryItems);
      var dairy = new Location(2, "Dairy Aisle", "You are in the dairy aisle. It's cold in here!", dairyItems);
      var produce = new Location(3, "Produce Section", "You're in the produce section. Looks like apples are in season this time of year.", produceItems);
      var junk = new Location(4, "Junk Food Aisle", "You are in the junk food aisle. They have the strangest potato chip flavors these days!", junkItems);
      var spices = new Location(5, "Spices Aisle", "You're in the spices aisle. Don't sneeze!", spicesItems);
      var lobster = new Location(6, "Seafood Counter", "You're standing at the seafood counter. Run, lobsters! Be free!", lobsterItems);
      var cereal = new Location(7, "Cereal Aisle", "You're in the cereal aisle. Golden Grahams are by far the superior choice.", cerealItems);
      var pasta = new Location(8, "Pasta Aisle", "You're in the pasta aisle. There's your friend Dan, he basically lives here.", pastaItems);
      var ramen = new Location(9, "Ramen Aisle", "You're in the ramen aisle. There are a bunch of college kids here.", ramenItems);
      var veggie = new Location(10, "Vegetable Section", "You're in the vegetable section. Looks like there's plenty of kale left.", veggieItems);
      
      var locations = [ center, bakery, dairy, produce, junk, spices, lobster, cereal, pasta, ramen, veggie ]
      
      center.validDirections = [ bakery.id, produce.id, dairy.id, junk.id ];
      bakery.validDirections = [ BAD, center.id, spices.id, pasta.id ];
      dairy.validDirections = [ spices.id, lobster.id, BAD, center.id ];
      produce.validDirections = [ center.id, veggie.id, lobster.id, cereal.id ];
      junk.validDirections = [ pasta.id, cereal.id, center.id, BAD ];
      spices.validDirections = [ BAD, dairy.id, BAD, bakery.id ];
      lobster.validDirections = [ dairy.id, BAD, BAD, produce.id ];
      cereal.validDirections = [ junk.id, ramen.id, produce.id, BAD ];
      pasta.validDirections = [ BAD, junk.id, bakery.id, BAD ];
      ramen.validDirections = [ cereal.id, BAD, veggie.id, BAD ];
      veggie.validDirections = [ produce.id, BAD, BAD, ramen.id ];
      
      var items = [ banana, cupcake, pringles, carrot ]
      
      var banana = new Item(300, "banana", "There is a ripe yellow banana here.");
      var cupcake = new Item(100, "cupcake", "There is a cupcake with pink frosting here.");
      var pringles = new Item(400, "pringles", "There is a can of stranglely shaped chips here.");
      var carrot = new Item(1000, "carrot", "There is a rabbit-approved snack here.");
                   
      function wrongMoveIndicator(_validDirections) {
       var message = "You cannot go that way. Right now you can move in the following directions: "; 
      	if (_validDirections[NORTH] !== BAD) { 
      		message += northCommand +  " ";
      	}
      	if (_validDirections[SOUTH] !== BAD) {
      		message += southCommand +  " ";
      	}
      	if (_validDirections[EAST] !== BAD) {
      		message += eastCommand +  " ";
      	}
      	if (_validDirections[WEST] !== BAD) {
      		message += westCommand +  " ";
      	}
      	displayMessage(message); 
      }
      
      function goToward(directionCommand) {
      	switch (directionCommand) {
      	case northCommand:
      		var newPlace = locations[currentLoc].validDirections[NORTH]
      		if (newPlace === BAD) {
      			wrongMoveIndicator(locations[currentLoc].validDirections);
      		} else {
      			locations[newPlace].visit();
      		}
      		break;
      	case southCommand:
      		var newPlace = locations[currentLoc].validDirections[SOUTH]
  		if (newPlace === BAD) {
  			wrongMoveIndicator(locations[currentLoc].validDirections);
  		} else {
  			locations[newPlace].visit();
  		}
  		break;
      	case eastCommand:
      		var newPlace = locations[currentLoc].validDirections[EAST]
  		if (newPlace === BAD) {
  			wrongMoveIndicator(locations[currentLoc].validDirections);
  		} else {
  			locations[newPlace].visit();
  		}
  		break;
      	case westCommand:
      		var newPlace = locations[currentLoc].validDirections[WEST]
  		if (newPlace === BAD) {
  			wrongMoveIndicator(locations[currentLoc].validDirections);
  		} else {
  			locations[newPlace].visit();
  		}
  		break;
    default:
      			 displayMessage("You cannot go that way.");
    	break;
      }
    }
    
          	function disableButtons(_validDirections) {
      		document.getElementById("North").disabled = (_validDirections[NORTH] === BAD);
      		document.getElementById("South").disabled = (_validDirections[SOUTH] === BAD);
      		document.getElementById("East").disabled = (_validDirections[EAST] === BAD);
      		document.getElementById("West").disabled = (_validDirections[WEST] === BAD);
      	}
      	// Utility function
      	
          function displayMessage(message) {
            document.getElementById("taMain").value = message;
            
           }
          
        function northButton_click() {
      		goToward(northCommand)
      	}
       function southButton_click() {
      		goToward(southCommand)
      	}
       function eastButton_click() {
      	 	goToward(eastCommand)
      	}
       function westButton_click() {
      		goToward(westCommand)
      	}
      
       
       function goButton_click() {
      		var userInput = document.getElementById("textCommand").value;
      		userInput = userInput.trim()
      		userInput = userInput.toLowerCase()
      		userInput = userInput.substr(0,1) 
      		switch(userInput) {
      		case northCommand:
      		case southCommand:
      		case eastCommand:
      		case westCommand:
      				goToward(userInput);
      			break;
      		default:
      			displayMessage("That is not a valid command. Valid commands are: test ") //N, S, E, W, n, s, e, w
      		}
      		textCommand.value = "";
       } 
       
       function helpButton_click() {
     	   help();
        }
       
       function takeButton_click() {
     	   take();
        }
        
        function cartButton_click(){
     	   displayCart();
        }
       
       function help() {
     	   displayMessage("Need help in Aisle 12? Valid commands are " + commands)
        }
       
       function take() {
       	   if (currentLoc === 3 && bananaCount < 1) {
       		   takeBanana();
       		   bananaInCart = true;
       	   } else if (currentLoc === 1 && cupcakeCount < 1) {
   			   takeCupcake();
   			   cupcakeInCart = true;
       	   } else if (currentLoc === 4 && pringlesCount < 1) {
   			   takePringles();
   			   pringlesInCart = true;
       	   } else {
       		   displayMessage("There's nothing here to take.");
       	   }
          }
       
    // Is this a good way of doing? Maybe use for-loop and/or arrays instead
       
       function take(itemId) {
    	   switch (itemId){
    		   case 300: cart.push("banana");
    		   break; 
    		   case 100: cart.push("cupcake");
    		   break;
    		   case 400: cart.push("pringles");
    		   break;
    		   case 1000: cart.push("carrot");
    		   break;
    	   }	   
       }
         
          function takeBanana() {
       	  	  bananaCount += 1; 
       		if (bananaCount = 1) {
       			 	cart.push("banana"); 
              	  displayMessage("You put the banana in your cart.");
       	  }
         }
       		
          function takeCupcake() {
       	      cupcakeCount += 1
       	   if (cupcakeCount = 1) {
       			 	cart.push("cupcake"); 
              	  displayMessage("You put the cupcake in your cart.");
       	  }
           }
          
          function takePringles() {
       	   	  pringlesCount += 1
      		if (pringlesCount = 1) {
      			 	cart.push("pringles"); 
      			 	displayMessage("You put the Pringles in your cart.");
      		  }
      		}

          
          function displayCart() {
       	   displayMessage("Your cart contains: " + cart);
          }

  		function displayScore(newScore) {
			var send = document.getElementById("taScore");
			send.value = score;
		}
        	  
       
       
      </script> 
     </head>

   <body onload="center.visit();"> 
   
   <!-- The initialization function is the reason that the location 0 text displays on load -->
   
   <h1 class="header"></h1>
   
   <br>
   <br>
   
       <textarea class="taMain" id="taMain" rows="8" cols="32"></textarea>
                 
       <br>
       
       Score:
		<br>
		
		<textarea class="taScore" id="taScore" rows="1" cols="4" readonly></textarea>
		
		<br>
		<br>
		
       <input class="command" type = "text" id = "textCommand" name = "textCommand">
       		
       		<input class="button" type = "button" value = "Go" onclick="goButton_click();">
       		
       		<br>
       
	<!-- I had trouble with disabling the buttons at first because I didn't give them IDs and was using their names for the function, but I figured it out-->
       <br>
       <input class="button" type="button" id = "North" value="North" onclick="northButton_click();">
       <input class="button" type="button" id = "South" value="South" onclick="southButton_click();">
       <input class="button" type="button" id = "East" value="East" onclick="eastButton_click();">
       <input class="button" type="button" id = "West" value="West" onclick="westButton_click();">
       <input class="button" type="button" id = "TakeButton" value="Take" onclick="takeButton_click();"/>
       <input class="button" type="button" id = "helpButton" value="Help" onclick="helpButton_click();"/>    
       <input class="button" type="button" id = "cartButton" value="Cart" onclick="displayCart();"/>
    
    <br>
	    
	<p class="comment"> Questions? Concerns? Contact the creator of the game <a href="mailto:jillian.srygley1@marist.edu"> here</a>.
	<br>
	<br>
	
	<p align="center"> <img src="game_map.png" width="750" height="525"></p>
	
	
</body></html>
